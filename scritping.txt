Trabajando con variables 

Variables y tipos de datos
==========================
Las variables locales están accesibles dentro de la función o subshell en el 
cual han sido creadas o declaradas. 
Las variables globales están accesibles a través del shell, y todos los 
subshells y funciones. 
Una variable local puede convertirse en global a través del comando "export". 

Tipos de datos: 
---------------
Definen el tipo de los datos que puede contener una variable. Por ejemplo, 
caracteres, números, etc. 
Esto puede cambiar la forma en que el shell usa las variables. Por ejemplo, el 
shell realiza aritmética mas rápidamente con variables enteras.  

Los shell UNIX más avanzados soportan cuatro tipos de datos:
	* Cadenas de caracteres (strings), que son secuencias de caracteres 
	alfanuméricos. 
	* Enteros (Integers), los cuales son números enteros. 
	* Punto Flotante (Floats), que son números decimales en punto flotante. 
	* Arreglos (Arays), que son secuencias de variables. 

Bourne shell (sh):
	Solo soporta strings. Todas las variables son globales. 
Bash shell (bash):
	Soporta strings y enteros. Solo se pueden declarar variables locales 
	en bash. 
TC Shell (tsh):
	Soporta strings, enteros, punto flotante y arreglos. Pueden ser 
	globales o locales. 
Korn shell (ksh):
	Idem TC shell. 

Usando Variables
================
El shell define variables automáticamente cuando se les asigna un valor por 
primera vez.  El comando typeset permite especificar opciones cuando asignamos 
valor a una variable. 
Si no se asigna valor a una variable durante una sentencia de asignación, "=", 
entonces se le asigna el valor nulo (null).
Para obtener o hacer referencia el valor de una variable, en lugar de la 
variable en sí misma, utilizamos el signo de pesos "$". Por ejemplo 
"echo $HOME" mostrará por la salida estándar el valor de la variable HOME. 
También podemos utilizar este símbolo para asignar el valor de 
una variable a otra variable "casa=$HOME".
Para eliminar una variable del espacio de nombres de variables, usamos el 
comando unset. 

Comillas
========
Si queremos evitar que el shell procese espacios y caracteres especiales como 
* o $, podemos encerrarlos entre comillas. 

Por ejemplo:
$ echo '* y $HOME'
* y $HOME
$ 
Mientras que:
$echo * y $HOME 
cacic Calibre citrixshare cuentas Desktop diamisc Documents Downloads dwhelper eqstrings gasl-ac grub-2_files HP2014.p12 HPSA hpsardp.txt ISOs Mail mails mbox Music openvpn PdfBook perl Pictures pmpi ppprobs practicapyth Public qemu qemuVms rdpshare scritping.txt scritping.txt~ shanescripts solaris SolarisLab SolarisLab.zip start_ra2hp tati Templates tomboy TPCACIC TSL  Versionado Videos vim-exercises VirtualBox VMs vmsnap workspace y /home/lechnerm
$

En el primer caso, dado que el mensaje esta encerrado entre comillas simples, 
', los metacaracteres * y $ son tratados literalmente. Mientras que en el 
segundo son interpretados por el shell _antes_ de invocar al comando echo. 

Los tipos de comillas que podemos utilizar son:
	* Comillas simples: ' '
		Permiten ocultar el significado de todos los caracteres 
		especiales, o metacaracteres. Incluyendo comillas dobles, 
		invertidas, espacios y saltos de linea. Por este motivo evitan 
		la sustitución de variables y comandos.
Ejemplo:
$ echo 'esto es un ejemplo: 
> con comillas simples, mi directorio predeterminado es $HOME, y
> el nombre de esta máquina es `hostname`'
esto es un ejemplo: 
con comillas simples, mi directorio predeterminado es $HOME, y
el nombre de esta máquina es `hostname`
$
	* Comillas dobles: " "
		Permiten ocultar el significado de los caracteres especiales, 
		espacios y saltos de linea con excepción de las comillas 
		invertidas, y los caracteres $ y \. Esto es permiten la 
		expansión de variables y comandos. 
Ejemplo:
	$ echo "esto es un ejemplo: 
con comillas simples, mi directorio predeterminado es $HOME, y
el nombre de esta máquina es `hostname`"
esto es un ejemplo: 
con comillas simples, mi directorio predeterminado es /home/lechnerm, y
el nombre de esta máquina es acerino
$

	* Comillas invertidas:  ` `
		Es el método implementado por Bourne shell (sh) para substituir 
		comandos con su resultado. ksh también lo implementa por 
		compatibilidad. 
		Cuando encerramos un comando entre comillas invertidas, el shell 
		interpreta que lo encerrado ahí es un comando, luego lo ejecuta y 
		sustituye el comando y las comillas invertidas por el resultado del 
		la ejecución. 
		
Ejemplo:
$ nombre=`hostname`
$ echo $nombre
acerino
$ echo Los siguientes usuarios están online: `who` 
Los siguientes usuarios están online: lechnerm tty7 2014-01-06 08:59 (:5) lechnerm pts/0 2014-01-06 09:00 (:5) lechnerm pts/1 2014-01-06 09:00 (:5) lechnerm pts/3 2014-01-06 11:05 (:5) lechnerm pts/4 2014-01-06 09:15 (:5)
$


De lo anterior, supongamos que queremos definir una variable que contenga el string
$30. En este caso, debemos usar comillas simples para evitar la interpretación del
shell del caracter $: 
$ precio='$30'
$ echo $precio 
$30 
$
Digamos que queremos usar el valor de la variable precio en una sentencia:
$ item=helado 
$ linea="El $item vale $precio" 
$ echo $linea
El helado vale $30
$

Definiendo atributos de variables:
==================================
Una variable puede tener uno o mas atributos. Un atributo define cómo una variable
será representada, accedida o mostrada. 
El atributo entero, por ejemplo, define la variable como de tipo entero, y el atributo
de justificación a izquierda para cadena de caracteres hace que esta se justifique 
a izquierda. 
Los atributos a definir pueden ser:
	* Entero (-i)
		Permite que la variable sea manipulada más rápido como valor entero, 
		evita que se asignen valores no enteros a la misma.
Ejemplo:
$  typeset -i entero=10
$ entero="un valor"
ksh: un valor: arithmetic syntax error
$ 

	* Punto Flotante (-E,-F)
		Define la variable como valor decimal en punto flotante. 
		Con -E se puede especificar el número de dígitos en la variable 
		independientemente de la ubicación del punto flotante.
		Con -F se puede indicar el número de dígitos luego del punto decimal.
Ejemplo:
$ typeset  -E 4 valor=3,1234
$ echo $valor
3,123
$ typeset  -F 5 valor2=3,1234
$ echo $valor2
3,12340
$ 

	* minúsculas o mayúsculas (-u, -l)	
		Convierte automáticamente valores a minúsculas o mayúsculas. 
Ejemplo:
$ typeset -u pepe="Mi NOMBRE es JOse"
$ echo $pepe
MI NOMBRE ES JOSE
$ typeset -l pepe="Mi NOMBRE es JOse"
$ echo $pepe                         
mi nombre es jose
$ 

	* Justificado a derecha o izquierda (-R, -L)
		Estos atributos permiten dar formato a los datos, y debe especificarse
		el ancho esperado cuando se utilizan estos atributos. 
Ejemplo:
$ echo "Justificado a $cadena."
Justificado a    derecha.
$ typeset -L 10 cadena="izquierda"
$ echo "Justificado a $cadena."
Justificado a izquierda .
$ 
	* Justificado a derecha o izquierda con ceros (-RZ, -LX)
		Estos atributos permiten dar formato, justificando a derecha o 
		izquierda. Con -RZ se justifica a derecha y se agregan tantos ceros 
		a izquierda como sean necesarios. Con -LZ se justifica a izquierda y 
		se remueve cualquier cero a la izquierda. 
Ejemplo. 
$ typeset -RZ 10 valor=234        
$ echo $valor             
0000000234
$ typeset -LZ 10 valor=0001232000
$ echo $valor                    
1232000
$ typeset -RZ 10 valor=123
$ echo $valor
0000000123
$ typeset -LZ 10 valor2=$valor
$ echo $valor2 
123
$ 
	* auto exportado (-x)
		Indica al shell que debe exportar la variable local en cualquier 
		momento que se defina la variable. Esto es útil si queremos que 
		el nuevo valor de una variable este disponible en todo el shell. 

	* solo lectura (-r)
		Evita que una variable pueda ser redefinida. A diferencia de otros 
		atributos, este no puede ser removido una vez que fue asignado a 
		una variable. 

Paradójicamente usamos el símbolo - para definir un atributo y + para removerlo.

Se puede usar el comando typeset para listar las variables definidas con un 
determinado atributo. Ejemplo:
$ typeset -F
SECONDS=1806,873
$ typeset -E
$ typeset -i 
entero=10
HISTCMD=75
JOBMAX=0
LINENO=1
MAILCHECK=600
OPTIND=1
PPID=7687
RANDOM=30453
SHLVL=2
TMOUT=0

Trabajando con parámetros
=========================
Los parámetros son variables reservadas utilizadas por el shell. 

Las variables de entorno son parámetros que permiten controlar el comportamiento 
del shell. Son declaradas como variables globales, algunas de ellas definidas en el 
archivo .profile dentro del home del usuario. 

Las variables definidas por los usuarios no pueden usar los mismos nombres
que las variables de entorno, estos son nombres reservados. Sin embargo, los usuarios
pueden cambiar el valor de algunas de ellas. 

Ejemplos de variables de entorno son: HOME, SHELL, y PATH.

El shell posee algunos parámetros especiales que nos permiten interactuar con el 
proceso actual. Estos incluyen: 

	* ? El cual contiene el estado de salida del último comando que el shell ha 
ejecutado. Si el comando se ejecutó satisfactoriamente (lo que esto signifique
depende de cada comando en particular), el estado de salida será 0, caso contrario 
será un valor distinto de cero. 
$ ls >>/dev/null 
$ echo $?
0
$ ls -MVDF
ls: opción inválida -- 'M'
$ echo $?
2
$ 
	* - Contiene las opciones del shell establecidas para el proceso de shell actual. 
$ echo $-
imsBE
$ 
	* ! Contiene el PID del último comando en segundo plano o el co-proceso que el 
	shell ah ejecutado.
$ top &
[1]	8168
$ top &
[2]	8169
$ echo $!
8169
$
	* $ este parámetro contiene el PID del proceso del shell actual. 
$ ps     
  PID TTY          TIME CMD
 7687 pts/5    00:00:00 bash
 7790 pts/5    00:00:00 ksh
 8204 pts/5    00:00:00 ps
$ echo $$
7790
$
	* PPID contiene el PID del proceso padre del shell actual. 
$ ps 
  PID TTY          TIME CMD
 7687 pts/5    00:00:00 bash
 7790 pts/5    00:00:00 ksh
 8226 pts/5    00:00:00 ps
$ echo $PPID
7687
$ 
	* ERRNO contiene el número devuelto por la llamada a sistema que falló mas
	recientemente. Este valor es dependiente del sistema y puede que no esté 
	disponible en algunos. 

Parámetros posicionales:
------------------------
Los parámetros posicionales contienen argumentos que han sido pasados a un 
comando, script o función. Permiten usar dichos argumentos en las líneas 
subsecuentes del script. 

El nombre de los parámetros depende del orden en que fueron especificados. 
El parámetro 0 contiene el nombre del comando o función 
a los cuales aplican los argumentos. El parámetro 1 contiene el primer argumento, 
el parámetro 2 contiene el segundo, y así sucesivamente. 

Ejemplo:
$ enero () {
> cal Jan $1 
> }
$  enero 2014
     Enero 2014       
do lu ma mi ju vi sá  
          1  2  3  4  
 5  6  7  8  9 10 11  
12 13 14 15 16 17 18  
19 20 21 22 23 24 25  
26 27 28 29 30 31     

En este caso, $1 se corresponde con el valor 2014 al invocar la función. Si 
modificamos la función, por ejemplo para que muestre enero de dos años distintos:

$ enero (){
> cal Jan $1
> cal Jan $2
> }
$ enero 2014 2015
     Enero 2014       
do lu ma mi ju vi sá  
          1  2  3  4  
 5  6  7  8  9 10 11  
12 13 14 15 16 17 18  
19 20 21 22 23 24 25  
26 27 28 29 30 31     
                      
     Enero 2015       
do lu ma mi ju vi sá  
             1  2  3  
 4  5  6  7  8  9 10  
11 12 13 14 15 16 17  
18 19 20 21 22 23 24  
25 26 27 28 29 30 31  
                      
$ 

Ahora el primer parámetro, $1, contiene el valor 2014 mientras que el segundo 
parámetro, $2, contiene el valor 2015.

Si tenemos más de nueve parámetros posicionales, deberemos entonces utilizar
{} a partir del décimo para invocarlos. Esto es, ${10}, ${11}, etc. 

La expresión $* y $@ devuelve el valor de todos los parámetros posicionales 
separados por espacios a excepción de $0, mientras que $# devuelve la cantidad 
de parámetros posicionales recibidos sin contar $0:

Ejemplo:
$ palmin () {
> echo "Recibi $# parámetros posicionales que son:" 
> typeset -l var
> for var in $* ;do 
> echo $var
> done
> }
$  palmin Esto ES una Frase Que pODRIA ser mas larga
Recibi 9 parámetros posicionales que son:
esto
es
una
frase
que
podria
ser
mas
larga
$

Diferencias entre $* y $@:
$* 	$1 $2 $3 … ${N}
$@ 	$1 $2 $3 … ${N}
"$*" 	"$1c$2c$3c…c${N}"
"$@" 	"$1" "$2" "$3" … "${N}"

Vemos que sin comillas dobles, ambos $* y $@ tiene el mismo efecto: Todos los 
parámetros posicionales desde $1 hasta el último son expandidos sin importancia. Ahora bien, cuando $* es encerrado entre comillas, se expande a su 
equivalente "$1c$2c$3c$4c……..$N", donde 'c' es el primer caracter de IFS. 
Por otra parte, cuando $@ es encerrado entre comillas dobles,
este se expande a "$1" "$2" "$3" … "${N}". Lo cual refleja todos los 
parámetros posicionales tales como fueron pasados al script o función. Por lo 
que, si queremos re-utilizar los parámetros posicionales para pasarlos a otra 
función, entonces $@ es la opción correcta. 

Link
http://wiki.bash-hackers.org/doku.php

Expansión de variables:
========================
Se refiere a el o los métodos que nos permiten acceder al valor de una variable.
La forma más común es a través del símbolo de pesos, "$", seguido por el nombre
de la variable. Las llaves, "{}" permiten delimitar el nombre de una variable
cuando esta se encuentra seguida de otros caracteres:

$ distancia=100 
$ printf "Faltan aun ${distancia}Km para llegar\n"
Faltan aun 100Km para llegar
$

El símbolo numeral,``#'', nos permite conocer la cantidad de caracteres de una
variable.
$ distancia=100
$ printf "La distancia tiene ${#distancia} dígitos.\n" 
La distancia tiene 3 dígitos.
$

Los siguientes modificadores, permiten cierta manipulación sobre el valor de la
variable: 

${var:-valor} 
	Devuelve el valor de la variable var si ésta se encuentra definida y su
	valor es no nulo. Si no se encuentra definida o su valor es nulo (null)
	entonces devuelve ``valor'':
	$ nombre=
	$ printf "El nombre es: ${nombre:-Nombre no encontrado}\n"
	El nombre es: Nombre no encontrado
	$
${var:=valor}
	Devuelve el valor de la variable var si esta se encuentra definida y su
	valor no es nulo. Si no se encuentra definida o su valor es nulo (null),	entonces asigna "valor" a var y devuelve ese valor como resultado. La
	diferencia con el modo anterior es que aquí puede modificarse el valor 
	de la variable:
	$ nombre=
	$ printf "El nombre es: ${nombre:=anonimo}\n"
	El nombre es: anonimo
	$ echo $nombre
	anonimo
	$ 
${var:+valor}
	Devuelve "valor" si la variable var esta definida y su valor no es nulo
	(null), caso contrario la expresion no devuelve nada:
	$ nombre=Samanta
	$ printf "${nombre:+ya existe}\n"
	ya existe
	$ 
${var:?valor}
	Devuelve el valor de la variable si se encuentra definida y su valor es
	no nulo (null). Si no se encuentra definida o su valor es nulo, entonces
	se devuelve "valor" y el shell termina. 
	Se puede utilizar este formato para garantizar que las variables 
	esenciales de un script se encuentran definidas antes de que el mismo		sea ejecutado. 
${var:?}
	Devuelve el valor de la variable si se encuentra definida y su valor es
	no nulo (null). Caso contrario, devuelve el error predeterminado del 
	shell y el shell termina. 
	$ echo ${nodef:?}
	bash: nodef: parámetro nulo o no establecido
	$


El siguiente grupo de modificadores permite encontrar y reemplazar subcadenas
dentro del valor de una variable:

${var/patron1/patron2}
	Reemplaza la primera aparición de patron1 dentro del valor de la 
	variable var, por patron2 y devuelve ese resultado:
	$ cadena="El tiempo sera de 30 minutos, con un error de 5 minutos"
	$ printf "${cadena/minutos/horas}\n"
	El tiempo sera de 30 horas, con un error de 5 minutos
	$
${var//patron1/patron2}
	Reemplaza todas las apariciones de patron1 dentro del valor de la 
	variable var, por patron2 y devuelve ese resultado:
	$ printf "${cadena//minutos/horas}\n"
	El tiempo sera de 30 horas, con un error de 5 horas
	$

${var:comienzo}
	Retorna el valor de la variable desde el caracter indicado por comienzo
	hasta el final de la variable:
	$ var="Neuquén, Argentina"
	$ printf "${var:9}\n"
	Argentina
	$

${var:comienzo:long}
	Retorna el valor de la variable desde el caracter indicado por comienzo
	y hasta el número de caracteres indicados por long:  
	$ printf "${var:9:4}\n"
	Arge
	$ 


${var#patron1}
	Si el valor de la variable comienza con patron1, entonces devuelve el 
	valor de la variable sin patron1, caso contrario devuelve el valor de 
	la variable sin modificar. Solo reemplaza hasta la primera aparición de
	patron1 de izquierda a derecha: 
	$ hoja=cap02_hoja1.txt 
	$ mv $hoja cap03${hoja#cap02} 

${var##patron1}
	Similar a lo anterior pero reemplaza hasta la última aparición de patron
	
	$ archivo=Pepe_cap02_cap05_hoja3.txt
	$ echo ${archivo#*cap}
	02_cap05_hoja3.txt
	$ echo ${archivo##*cap}
	05_hoja3.txt
	$ 

${var%patron1}
	Si el valor de la variable finaliza con patron1, entonces devuelve el 
	valor de la variable sin patron1, caso contrario devuelve el valor de
	la variable sin modificar. Solo reemplaza hasta la primera aparición de
	patron de derecha a izquierda. 
	$ hoja=cap02_hoja1.txt 
	$ mv $hoja ${hoja#txt}pdf 


${var%%patron1}
	Similar a lo anterior pero reemplaza hasta la última aparición de 
	patron:
	$ archivo=Pepe_cap02_cap05_hoja3.txt
	echo ${archivo%cap*}
	Pepecap02_
	$ echo ${archivo%%cap*}
	Pepe
	$ 


Arreglos:
=========

Los arreglos son variables que contienen una colección de valores, almacenados
como una secuencia de elementos ordenados. 

El nombre de un arreglo hace referencia a todo el 

lechnerm@melodia:~$ arr[0]="hola"
lechnerm@melodia:~$ arr[1]="que"
lechnerm@melodia:~$ arr[4]="tal"
lechnerm@melodia:~$ echo ${arr[*]}
hola que tal
lechnerm@melodia:~$ echo ${!arr[*]}
0 1 4
lechnerm@melodia:~$ echo ${!arr[*]:3}

lechnerm@melodia:~$ echo ${arr[*]:3}
tal
lechnerm@melodia:~$ echo ${!arr[*]:3}

lechnerm@melodia:~$ echo ${!arr[*]:1:3}

lechnerm@melodia:~$ echo ${arr[*]:1:3}
que tal
lechnerm@melodia:~$ echo ${#arr[*]}
3
lechnerm@melodia:~$ echo ${#arr[4]}
3
lechnerm@melodia:~$ 

Realizando aritmetica sencilla
------------------------------

Es posible incorporar expresiones aritmeticas y lógicas 
en la linea de comandos. El shell evaluará la expresión,
sustituyendo la misma con su reslutado. Sin embargo, el 
shell solo trabaja con enteros positivos. 


Declarar el tipo de las variables (para los shells que las
soportan) permite mejorar la performance. El comando typeset
sirve a este propósito. 

$ typeset -i itemID=5

Si bien la base utilizada es decimal, esto puede cambiarse
del siguiente modo:

typeset -i nibble=2#1010
$ nibble=2#1010

es equivalente a 
typset -i2 nibble=1010

En las versiones de unix anteriores el comando expr era
utilizado para evaluar las expresiones:

$ i=`expr $i+1`

Actualmente fue reemplazado por let:

$ let i=i+1

Si se quieren incluir espacios en la expresion anterior entonces
se debe encerrar la expresion entre comillas dobles:

$ let "i = i + 1"

Tambien es equivalente usar doble parentesis

$ ((i=i+1))

El orden de precedencia es el convencional, a no ser
que se utilicen parentesis. Ademas de * / + y -, se 
soporta el operador modulo % 

Operaciones lógicas bit a bit
-----------------------------

Operadores logicos:
	&& and (0 es true)
	|| or
	! negacion 

Mientras que los operadores logicos comparan y manipulan 
expresiones completas, las operaciones bit a bit realizan 
operaciones booleanas sobre bit individuales. Estos son 
normalmente utilizados sobre operadores binarios. 

Operadores bit a bit: 
	& and 
	| or
	^ xor
	~ negacion 

El shell tambien soporta opeaciones de corrimientos sobre
bits: 
	<< --> ((2#1001<<1)) = 2#10010
	>> --> ((2#1001>>1)) = 2#100


Operadores adicionales:
-----------------------

Comparadores:
	< menor que 
	> mayor que 
	<= menor o igual 
	>= mayor o igual 
	== igual 
	!= no igual

Incremento/decremento:
	+= ejemplo: ((i+=1))
	-= ejemplo: ((i-=1))




